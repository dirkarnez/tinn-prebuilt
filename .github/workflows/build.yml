name: cpp-cmake-mingw-prebuilt-release-actions-workflow
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
      - 'c*'

jobs:
  build:
    strategy:
      matrix:
        compiler:
        - {
            name: "x86_64-8.1.0-release-posix-seh-rt_v6-rev0",
            url: "https://github.com/dirkarnez/cpp-tools/raw/main/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z",
            generator: "MinGW Makefiles",
            on: "windows-latest"
          }
        - {
            name: "winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64-9.0.0-r1",
            url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/11.2.0-12.0.1-9.0.0-r1/winlibs-x86_64-posix-seh-gcc-11.2.0-mingw-w64-9.0.0-r1.zip",
            generator: "MinGW Makefiles",
            on: "windows-latest"
          }
        # - {
        #     name: "msvc2019",
        #     generator:  "Visual Studio 16 2019",
        #     extra: "-A x64",
        #     on: "windows-2019"
        #   }
        # - {
        #     name: "msvc2022",
        #     generator:  "Visual Studio 17 2022",
        #     extra: "-A x64",
        #     on: "windows-latest"
        #   }
# tagName: v3.8.1
    runs-on: ${{ matrix.compiler.on }}
    env:
      libraryName: tinn
      cmakeInstallationPath: tinn-installation
    steps:
      # - name: Install MSYS2
      #   uses: msys2/setup-msys2@v2
      #   with:
      #     msystem: MINGW64
      #     install: make autoconf automake libtool autogen perl diffutils patch git
          
      - uses: actions/checkout@v4
        with:
          repository: glouw/tinn
          ref: ${{ env.tagName }}
          path: ${{ env.libraryName }}
          submodules: true
        
      - name: download compiler
        if: ${{  matrix.compiler.url }}
        shell: cmd
        run: |
          curl ${{ matrix.compiler.url }} -L --output compiler &&^
          7z.exe x compiler
          
      - name: curl cmake-3.24.0-windows-x86_64.zip
        shell: cmd
        run: curl https://github.com/Kitware/CMake/releases/download/v3.24.0/cmake-3.24.0-windows-x86_64.zip -L --output cmake-3.24.0-windows-x86_64.zip && dir && 7z.exe x cmake-3.24.0-windows-x86_64.zip

      - name: curl PortableGit-2.38.1-64-bit.7z.exe
        shell: cmd
        run: curl https://github.com/git-for-windows/git/releases/download/v2.38.1.windows.1/PortableGit-2.38.1-64-bit.7z.exe -L --output PortableGit-2.38.1-64-bit.7z.exe && dir && 7z.exe x PortableGit-2.38.1-64-bit.7z.exe -o"PortableGit-2.38.1-64-bit"
      
      - name: set PATH, check mingw version, cmake generate, build and install
        shell: cmd
        run: |
            set PATH=^
            ${{ github.workspace }}\mingw64;^
            ${{ github.workspace }}\mingw64\bin;^
            ${{ github.workspace }}\PortableGit-2.38.1-64-bit\bin;
            set CD_LINUX=%CD:\=/%
            cd "${{ env.libraryName }}" &&^
            mingw32-make.exe &&^
            dir /s
          
      # - shell: cmd
      #   run: |
      #     cd "${{ env.libraryName }}" &&^
      #     cd include &&^
      #     dir &&^
      #     "${{ github.workspace }}\PortableGit-2.38.1-64-bit\usr\bin\sed.exe" --version &&^
      #     "${{ github.workspace }}\PortableGit-2.38.1-64-bit\usr\bin\sed.exe" -i "s/#define DARKNET_API/#define DARKNET_API\n#include <time.h>/g" darknet.h &&^
      #     type .\darknet.h
          
      # - name: set PATH, check mingw version, cmake generate, build and install
      #   shell: msys2 {0}
      #   run: |
      #       workspace=$(pwd) &&
      #       export PATH="$workspace/mingw64:$workspace/mingw64/bin:$workspace/cmake-3.24.0-windows-x86_64/bin:$workspace/PortableGit-2.38.1-64-bit/bin:$workspace/msys64/usr/bin:/usr/bin" &&
      #       cd "${{ env.libraryName }}" && \
      #       g++ --version && \
      #       mingw32-make obj backup libdarknet.a libdarknet.so
            
      - shell: cmd
        run: |
          cd "${{ env.libraryName }}" &&^
          dir /s
          
      # - shell: cmd
      #   run: |
      #     cd "${{ env.libraryName }}" &&^
      #     mkdir "export\lib" &&^
      #     xcopy /H /Y /C "libdarknet.a" "export\lib" &&^
      #     xcopy /H /Y /C "libdarknet.so" "export\lib" &&^
      #     mkdir "export\include" &&^
      #     xcopy /E /H /Y /C "include\*" "export\include" &&^
      #     mkdir "export\cfg" &&^
      #     xcopy /E /H /Y /C "cfg\*" "export\cfg" &&^
      #     mkdir "export\data" &&^
      #     xcopy /E /H /Y /C "data\*" "export\data" &&^
      #     cd export &&^
      #     dir /s
          
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          directory: "${{ env.libraryName }}"
          filename: "${{ env.libraryName }}-${{ github.ref_name }}-${{ matrix.compiler.name }}.zip"
        
      - name: Release prebuilt
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.libraryName }}/${{ env.libraryName }}-${{ github.ref_name }}-${{ matrix.compiler.name }}.zip"
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
